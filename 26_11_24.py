# -*- coding: utf-8 -*-
"""26_11_24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jOW3fDYN8xZJQCjLa8tNfnKBJOpMYMwE
"""



"""# Abstraction

## 1. Shape Classes( Cirlcle and Rectangle)
"""

from abc import ABC, abstractmethod

# Abstract Class
class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

    @abstractmethod
    def perimeter(self):
        pass


# Concrete class for circle
class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius * self.radius

    def perimeter(self):
        return 2 * 3.14 * self.radius


# Concrete class for Rectangle
class Rectangle(Shape):
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

    def perimeter(self):
        return 2 * (self.length + self.width)


circle = Circle(5)
print("Circle Area:", circle.area())
print("Circle Perimeter:",circle.perimeter())

rectangle = Rectangle(4, 6)
print("Rectangle Area:", rectangle.area())
print("Rectangle Perimeter:",rectangle.perimeter())



"""# Polymorphism"""

class Animal:
  def speak(self):
    pass


class Dog(Animal):
  def speak(self):
    return "Woof!"

class Cat(Animal):
  def speak(self):
    return "Meow!"

class Cow(Animal):
  def speak(self):
    return "Moo!"


# function to demonstrate polymorphism
def make_animal_speak(animal):
  print(animal.speak())

#usage
animals = [Dog(), Cat(), Cow()]

for animal in animals:
  make_animal_speak(animal)

"""# Overloading"""

def greet(name = "Guest"):       # it stores default element it don't given the input
  print(f"Hello, {name}!")

greet()
greet("raj")

